[{
    "name": "Current User Authorizations",
    "config": {
        "endpoint": "me/authorization",
        "filter": "[].concat(this)"
    }
}, {
    "name": "Current User",
    "requires": [ "Current User Authorizations" ],
    "config": {
        "endpoint": "me",
        "get": {
            "fields": ":all,userCredentials[:owner,!userGroupAccesses,userRoles[id,name,displayName]],!userGroupAccesses,userGroups[id,name,displayName],organisationUnits[id,name]"
        }
    },
    "extend": {
        "authorities": {
            "get": "requires['Current User Authorizations']"
        },
        "hasUserRole": {
            "args": [ "name" ],
            "fn": "((this.userCredentials || {}).userRoles || []).some(function (userRole) { return userRole.name === name; })"
        },
        "hasAllAuthority": {
            "fn": "(this.authorities || []).indexOf('ALL') >= 0"
        },
        "isUserAdministrator": {
            "fn": "this.hasUserRole('User Administrator')"
        },
        "isGlobalUser": {
            "fn": "this.organisationUnits && this.organisationUnits.length && this.organisationUnits[0].name === 'Global'"
        }
    }
}, {
    "name": "DATIM User Groups",
    "comment": "Get all user groups with (DATIM) in their name",
    "config": {
        "datamodel": "userGroups",
        "get": {
            "fields": "id,name,users[id,name]",
            "filter": "name:like: (DATIM)"
        }
    },
    "filter": "_.sortBy(this.filter(function (userGroup) { return userGroup.name.match(/\\(DATIM\\)$/); }), 'name')"
}, {
    "name": "User Roles",
    "comment": "Get all the user roles in the system and provide a function to grab a particular one",
    "config": {
        "datamodel": "userRoles"
    },
    "extend": {
        "getByName": {
            "args": [ "name" ],
            "fn": "_.find(this, { name: name })"
        }
    }
}, {
    "name": "User Types",
    "type": "static",
    "config": [
        { "name": "Global", "regex": "^Global users" },
        { "name": "Inter-Agency", "value": "Country team", "regex": "^OU .+? Country team$" },
        { "name": "Agency", "regex": "^OU .+? Agency " },
        { "name": "Partner", "regex": "^OU .+? Partner " },
        { "name": "MOH", "regex": "^Data MOH access$" }
    ],
    "extend": {
        "fromUser": {
            "args": [ "user" ],
            "fn": "(this.filter(function (ut) { return (user.userGroups || []).some(function (ug) { return (new RegExp(ut.regex, 'i').test(ug.name)); }); })[0] || { name: 'Unknown type' }).name"
        }
    }
}, {
    "name": "User Actions",
    "comment": "Checkboxes for 2.29 users",
    "type": "static",
    "requires": [ "User Roles" ],
    "config": {
        "comment": "roles are the checkboxes and actions are what Type gets which checkbox",
        "roles": [
            { "name": "Read Data", "userRole": "Read Only", "default": true },
            { "name": "Approvals: Accept Data", "userRole": "Data Accepter" },
            { "name": "Approvals: Submit Data", "userRole": "Data Submitter" },
            { "name": "View unapproved data", "userRole": "Unapproved Data Viewer", "default": true },
            { "name": "Manage users", "userRole": "User Administrator", "userGroupRestriction": true },
            { "name": "Deduplication", "userRole": "Data Deduplication" },
            { "name": "Tracker", "userRole": "Tracker" }
        ],
        "actions": {
            "Partner": [ "Manage users", "Approvals: Submit Data" ],
            "PartnerDoD": [ "Manage users", "Approvals: Submit Data" ],
            "Moh": [ "Manage users" ],
            "Agency": [ "Manage users", "Approvals: Accept Data", "Approvals: Submit Data", "View Unapproved Data" ],
            "Inter-Agency": [ "Manage users", "Approvals: Accept Data", "Approvals: Submit Data", "Deduplication" ],
            "Global": [ "Manage users" ]
        },
        "dataEntryRestrictions": {
            "normal": {
                "Agency": {
                    "SIMS": [ "Data Entry SIMS" ],
                },
                "Inter-Agency": {
                    "SI": [ "Data Entry SI Country Team", "Tracker", "Data Deduplication" ]
                },
                "Partner": {
                    "SI": [ "Data Entry SI" ],
                    "SI DOD": [ "Data Entry SI DOD" ],
                    "EA": [ "Data Entry EA" ]
                }
            },
            "manager": {
                "Agency": {
                    "SI": [ "Data Entry SI" ],
                    "SI DOD": [ "Data Entry SI DOD" ],
                    "SIMS": [ "Data Entry SIMS" ],
                    "EA": [ "Data Entry EA" ]
                },
                "Inter-Agency": {
                    "SI": [ "Data Entry SI Country Team", "Tracker", "Data Deduplication", "Data Entry SI" ],
                    "SI DOD": [ "Data Entry SI DOD" ],
                    "SIMS": [ "Data Entry SIMS" ],
                    "EA": [ "Data Entry EA" ]
                },
                "Partner": {
                    "SI": [ "Data Entry SI" ],
                    "SI DOD": [ "Data Entry SI DOD" ],
                    "EA": [ "Data Entry EA" ]
                }
            }
        }
    },
    "extend": {
        "isRoleApplicableToUser": {
            "args": [ "role", "userEntity" ],
            "fn": "!!role && (!userEntity || !role.userEntityRequires ? true : !!userEntity[role.userEntityRequires])"
        },
        "isDataEntryApplicableToUser": {
            "args": [ "entryName", "userEntity" ],
            "fn": "(entryName === 'SI DOD' && userEntity && userEntity.dodEntry) || (entryName === 'SI' && userEntity && userEntity.normalEntry) || (entryName !== 'SI' && entryName !== 'SI DOD')"
        },
        "getDataStreamKey": {
            "args": [ "dataEntryName" ],
            "fn": "dataEntryName === 'SI DOD' ? 'SI' : dataEntryName"
        },
        "getActionRoles": {
            "fn": "this.roles.slice(0, 5)"
        }
    },
    "filter": [
        "this.roles.forEach(function (role) { role.userRoleId = (requires['User Roles'].getByName(role.userRole) || {}).id; }) || this"
    ]
}, {
    "name": "Data Groups Definition",
    "comment": "AKA Data Streams",
    "type": "static",
    "config": [
        { "name": "PRIME", "userTypes": [ "Global", "Agency", "Partner" ] },
        { "name": "PRIME Country Team", "userTypes": [ "Global", "Inter-Agency" ] },
        { "name": "Expenditure", "userTypes": [ "Global", "Agency", "Inter-Agency", "Partner" ] },
        { "name": "SIMS", "userTypes": [ "Global", "Agency", "Inter-Agency" ] },
        { "name": "SaS", "userTypes": [ "Global" ] },
        { "name": "MOH", "userTypes": [ "Agency", "Inter-Agency", "MOH" ] }
    ],
    "extend": {
        "getNames": {
            "args": [ "prefix", "suffix" ],
            "fn": "this.map(function (dg) { return [prefix, dg.name, suffix].join(' ').trim(); })"
        },
        "getUserTypes": {
            "args": [ "dataGroupName" ],
            "fn": "(this.filter(function (dg) { return dg.name === dataGroupName; })[0] || {}).userTypes"
        }
    }
}, {
    "name": "Data Groups User Groups",
    "requires": [ "Data Groups Definition" ],
    "config": {
        "datamodel": "userGroups",
        "get": {
            "filter": "name:in:[${requires['Data Groups Definition'].getNames('Data', 'access').join(',')}]"
        },
        "filter": "_.groupBy(this, function (ug) { return ug.name.replace(/^Data | access$/g, ''); })"
    }
}, {
    "name": "Data Groups User Roles",
    "requires": [ "Data Groups Definition" ],
    "config": {
        "datamodel": "userRoles",
        "get": {
            "filter": "name:in:[${requires['Data Groups Definition'].getNames('Data Entry').join(',')}]"
        },
        "filter": "_.groupBy(this, function (obj) { return obj.name.replace(/^Data Entry /, ''); })"
    }
}, {
    "name": "Data Groups",
    "type": "static",
    "requires": [ "Current User", "Data Groups Definition", "Data Groups User Groups", "Data Groups User Roles" ],
    "extend": {
        "isAccessibleToUser": {
            "args": [ "dataGroup", "user" ],
            "fn": "_.difference(_.pluck(dataGroup.userGroups || [], 'id'), _.pluck(user.userGroups || [], 'id')).length === 0"
        },
        "isEntryForUser": {
            "args": [ "dataGroup", "user" ],
            "fn": "dataGroup && dataGroup.userRoles && dataGroup.userRoles.length && _.difference(_.pluck(dataGroup.userRoles || [], 'name'), _.pluck(user.userCredentials.userRoles || [], 'name')).length === 0"
        },
        "extendFromUser": {
            "args": [ "dataGroup", "user" ],
            "fn": "{ access: this.isAccessibleToUser(dataGroup, user), entry: this.isEntryForUser(dataGroup, user) }"
        },
        "fromUser": {
            "args": [ "user" ],
            "fn": "this.map(function (dg) { return _.assign(_.clone(dg), this.extendFromUser(dg, user)); }.bind(this))"
        },
        "filterByUserType": {
            "args": [ "dataGroups", "userType" ],
            "fn": "dataGroups.filter(function (dg) { var userTypes = requires['Data Groups Definition'].getUserTypes(dg.name); return !userType || !userTypes || userTypes.indexOf(userType) !== -1; })"
        }
    },
    "filter": [
        "requires['Data Groups Definition'].slice()",
        "this.map(function (dg) { return (dg.userGroups = requires['Data Groups User Groups'][dg.name] || []) && dg; })",
        "this.map(function (dg) { return (dg.userRoles = requires['Data Groups User Roles'][dg.name] || []) && dg; })",
        "this.filter(function (dg) { return requires['Current User'].hasAllAuthority() || _.pluck(dg.userGroups, 'id').some(function (ugId) { return _.pluck(requires['Current User'].userGroups, 'id').indexOf(ugId) !== -1; }) })"
    ]
}, {
    "name": "Organisation Units at Level",
    "comment" :"Get all the OUs at a given level",
    "type": "dynamic",
    "args": [ "level" ],
    "config": {
        "datamodel": "organisationUnits",
        "get": {
            "level": "${level}",
            "fields": "id,name,displayName"
        },
        "filter": "_.sortBy(this, 'name')"
    }
}, {
    "name": "Funding Agency COGS",
    "config": {
        "datamodel": "categoryOptionGroupSets",
        "get": {
            "fields": "id",
            "filter": "name:eq:Funding Agency"
        },
        "filter": "(this[0] || {}).id"
    }
}, {
    "name": "Agencies",
    "requires": [ "Funding Agency COGS" ],
    "config": {
        "endpoint": "categoryOptionGroupSets",
        "datamodel": "categoryOptionGroups",
        "get": {
            "fields": "categoryOptionGroups[id,name,code]",
            "id": "${requires['Funding Agency COGS']}"
        },
        "filter": "_.sortBy(this.filter(function (agency) { return (agency && typeof agency.code === 'string' && agency.code !== ''); }), 'name')"
    }
}, {
    "name": "Agencies in Organisation",
    "type": "dynamic",
    "requires": [ "Agencies" ],
    "args": [ "organisationUnit" ],
    "preflight": "organisationUnit && !!organisationUnit.name",
    "config": {
        "datamodel": "userGroups",
        "get": {
            "filter": "name:ilike:${organisationUnit.name} Agency"
        },
        "filter": [
            "this.reduce(function (obj, ug) { return this.extendObj(obj, ug, this.getAgencyName(ug), this.getType(ug)); }.bind(this), {})",
            "requires.Agencies.map(function (agency) { return _.extend({}, agency, this[agency.code]); }.bind(this))",
            "this.filter(function (agency) { return agency.mechUserGroup && agency.mechUserGroup.id && agency.userUserGroup && agency.userUserGroup.id })"
        ]
    },
    "extend": {
        "getAgencyName": {
            "args": [ "userGroup" ],
            "fn": "(/Agency .+?(?= all| user)/i.exec(userGroup.name) || '').toString().replace('Agency ', 'Agency_')"
        },
        "getType": {
            "args": [ "userGroup" ],
            "fn": "(/all mechanisms$/i.test(userGroup.name) ? 'mechUserGroup' : (/user administrators$/i.test(userGroup.name) ? 'userAdminUserGroup' : 'userUserGroup'))"
        },
        "extendObj": {
            "args": [ "obj", "userGroup", "agencyName", "groupType" ],
            "fn": "(function () { obj[agencyName] = obj[agencyName] || {}; obj[agencyName][groupType] = userGroup; return obj; })()"
        }
    }
}, {
    "name": "DoD View ID",
    "config": {
        "endpoint": "systemSettings/keyAPP_User_Management-dod_only_SqlView",
        "datamodel": "value"
    }
}, {
    "name": "DoD View Data",
    "requires": [ "DoD View ID" ],
    "config": {
        "endpoint": "sqlViews/${requires['DoD View ID']}/data.json",
        "filter": "_.groupBy(this.rows.map(function (row) { return this.headers.reduce(function (obj, metadata, index) { obj[metadata.name] = row[index]; return obj; }, {}); }.bind(this)), 'ou')"
    },
    "extend": {
        "hasEntry": {
            "args": [ "orgUnitId", "partnerId" ],
            "fn": "_.some(this[orgUnitId] || [], { partner: partnerId })"
        },
        "isNormalEntry": {
            "args": [ "orgUnitId", "partnerId" ],
            "fn": "(this.hasEntry(orgUnitId, partnerId) ? _.some(this[orgUnitId], { partner: partnerId, nondod: '1' }) : true)"
        }
    }
}, {
    "name": "Implementing Partner COGS",
    "config": {
        "datamodel": "categoryOptionGroupSets",
        "get": {
            "fields": "id",
            "filter": "name:eq:Implementing Partner"
        },
        "filter": "(this[0] || {}).id"
    }
}, {
    "name": "Partners",
    "requires": [ "Implementing Partner COGS" ],
    "config": {
        "endpoint": "categoryOptionGroupSets",
        "datamodel": "categoryOptionGroups",
        "get": {
            "fields": "categoryOptionGroups[id,name,code]",
            "id": "${requires['Implementing Partner COGS']}"
        },
        "filter": "_.sortBy(this.filter(function (partner) { return (partner && typeof partner.code === 'string' && partner.code !== ''); }), 'name')"
    }
}, {
    "name": "Partners in Organisation",
    "requires": [ "Partners", "DoD View Data" ],
    "type": "dynamic",
    "args": [ "organisationUnit" ],
    "preflight": "organisationUnit && !!organisationUnit.name",
    "config": {
        "datamodel": "userGroups",
        "get": {
            "filter": "name:ilike:${organisationUnit.name} Partner"
        },
        "filter": [
            "this.reduce(function (obj, ug) { return this.extendObj(obj, ug, this.getPartnerCode(ug), this.getType(ug)); }.bind(this), {})",
            "requires.Partners.map(function (partner) { return _.extend({}, partner, this[partner.code]); }.bind(this))",
            "this.filter(function (partner) { return partner.mechUserGroup && partner.mechUserGroup.id && partner.userUserGroup && partner.userUserGroup.id; })",
            "this.forEach(function (partner) { partner.dodEntry = requires['DoD View Data'].hasEntry(organisationUnit.id, partner.id); partner.normalEntry = requires['DoD View Data'].isNormalEntry(organisationUnit.id, partner.id); }) || this"
        ]
    },
    "extend": {
        "getPartnerCode": {
            "args": [ "userGroup" ],
            "fn": "(/Partner \\d+?(?= )/i.exec(userGroup.name) || '').toString().replace('Partner ', 'Partner_')"
        },
        "getType": {
            "args": [ "userGroup" ],
            "fn": "(/ all mechanisms - /i.test(userGroup.name) ? 'mechUserGroup' : (/ user administrators - /i.test(userGroup.name) ? 'userAdminUserGroup' : 'userUserGroup'))"
        },
        "extendObj": {
            "args": [ "obj", "userGroup", "partnerName", "groupType" ],
            "fn": "(function () { obj[partnerName] = obj[partnerName] || {}; obj[partnerName][groupType] = userGroup; return obj; })()"
        }
    }
}, {
    "name": "Interagency Groups",
    "comment": "Load groups given an OU: OU __ Country Teams, OU __ user administrators, OU __ all mechanisms",
    "type": "dynamic",
    "args": [ "organisationUnit" ],
    "preflight": "organisationUnit && !!organisationUnit.name",
    "config": [{
        "name": "userUserGroup",
        "datamodel": "userGroups",
        "get": {
            "filter": "name:ilike:OU ${organisationUnit.name} Country team"
        },
        "filter": "this.reduce(function (current, ug) { return (/OU .+? Country team/i).test(ug.name) ? ug : current; }, undefined)"
    }, {
        "name": "userAdminUserGroup",
        "datamodel": "userGroups",
        "get": {
            "filter": "name:ilike:OU ${organisationUnit.name} user administrators"
        },
        "filter": "this.reduce(function (current, ug) { return (/OU .+? user administrators/i).test(ug.name) ? ug : current; }, undefined)"
    }, {
        "name": "mechUserGroup",
        "datamodel": "userGroups",
        "get": {
            "filter": "name:ilike:OU ${organisationUnit.name} all mechanisms"
        },
        "filter": "this.reduce(function (current, ug) { return (/OU .+? all mechanisms/i).test(ug.name) ? ug : current; }, undefined)"
    }]
}, {
    "name": "Category Dimension Constraint",
    "comment": "Get all first Funding Mechanism category",
    "config": {
        "datamodel": "categories",
        "get": {
            "filter": "name:eq:Funding Mechanism"
        },
        "filter": "this[0]"
    }
}, {
    "name": "Global User Groups",
    "comment": "Get the 'Global' user groups",
    "config": {
      "datamodel": "userGroups",
      "get": {
        "filter": "name:in:[Global Users,Global User Administrators,Global all mechanisms]"
      },
      "filter": "this.reduce(function (obj, ug) { var key = (ug.name === 'Global Users' ? 'userUserGroup' : (ug.name === 'Global User Administrators' ? 'userAdminUserGroup' : 'mechUserGroup')); obj[key] = ug; return obj; }, {})"
    }
}, {
    "name": "MOH Groups",
    "type": "dynamic",
    "args": [
      "organisationUnit"
    ],
    "preflight": "organisationUnit && !!organisationUnit.name",
    "config": [
      {
        "name": "userUserGroup",
        "datamodel": "userGroups",
        "get": {
            "filter": "name:eq:OU ${organisationUnit.name} MOH Users"
        },
        "filter": "this[0]"
      },
      {
        "name": "userAdminUserGroup",
        "datamodel": "userGroups",
        "get": {
          "filter": "name:eq:OU ${organisationUnit.name} MOH User administrators"
        },
        "filter": "this[0]"
      }
    ]
}]
